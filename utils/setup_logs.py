import getpass
import paramiko
import json
import os

NODES_FILE = "nodes.json"
CENTRAL_HOST = "89.39.121.249"
CENTRAL_PORT = 514

CONF_TEMPLATE = """
module(load="imfile")

input(type="imfile"
      File="/var/log/supervisor/xray.out.log"
      Tag="xray-{node}"
      Severity="info"
      Facility="local7"
      PersistStateInterval="200"
      PollingInterval="1")

*.* @@{central_host}:{central_port}
"""

def load_nodes():
    if os.path.exists(NODES_FILE):
        with open(NODES_FILE) as f:
            return json.load(f)
    return []

def save_nodes(nodes):
    with open(NODES_FILE, "w") as f:
        json.dump(nodes, f, indent=2)

def connect_ssh(host, user, port, use_key, key_path=None, password=None):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        if use_key:
            ssh.connect(hostname=host, port=port, username=user, key_filename=key_path, timeout=10)
        else:
            ssh.connect(hostname=host, port=port, username=user, password=password, timeout=10)
        return ssh
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}: {e}")
        return None

def add_node():
    host = input("IP –Ω–æ–¥—ã: ").strip()
    name = input("–ù–∞–∑–≤–∞–Ω–∏–µ (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ): ").strip()
    user = input("SSH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é root): ").strip() or "root"
    port_input = input("SSH –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 22): ").strip()
    port = int(port_input) if port_input else 22

    auth_method = input("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (1 - –∫–ª—é—á, 2 - –ø–∞—Ä–æ–ª—å): ").strip()
    use_key = auth_method == "1"

    if use_key:
        key_path = input("–ü—É—Ç—å –∫ SSH-–∫–ª—é—á—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ~/.ssh/id_rsa): ").strip()
        if not key_path:
            key_path = os.path.expanduser("~/.ssh/id_rsa")
        password = None
    else:
        key_path = None
        password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ SSH –ø–∞—Ä–æ–ª—å: ")

    ssh = connect_ssh(host, user, port, use_key, key_path, password)
    if not ssh:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        print("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º rsyslog...")
        ssh.exec_command("apt update && apt install -y rsyslog")

        conf = CONF_TEMPLATE.format(node=name, central_host=CENTRAL_HOST, central_port=CENTRAL_PORT)
        remote_path = f"/etc/rsyslog.d/30-xray-{name}.conf"

        sftp = ssh.open_sftp()
        with sftp.file(remote_path, "w") as f:
            f.write(conf)
        sftp.close()

        ssh.exec_command("systemctl restart rsyslog")
        print(f"‚úÖ –ù–æ–¥–∞ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")

        nodes = load_nodes()
        nodes.append({
            "host": host,
            "name": name,
            "user": user,
            "port": port,
            "auth_method": "key" if use_key else "password",
            "key_path": key_path if use_key else None
        })
        save_nodes(nodes)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–¥—ã: {e}")
    finally:
        ssh.close()

def show_nodes():
    nodes = load_nodes()
    if not nodes:
        print("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–¥.")
        return
    for i, n in enumerate(nodes, 1):
        auth = "–∫–ª—é—á" if n.get("auth_method") == "key" else "–ø–∞—Ä–æ–ª—å"
        print(f"{i}. {n['name']} ‚Äî {n['host']}:{n.get('port',22)} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {n.get('user','root')}, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {auth})")

def main():
    while True:
        print("\n=== –ú–µ–Ω—é ===")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–¥—É")
        print("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥")
        print("3. –í—ã–π—Ç–∏")
        choice = input("–í—ã–±–æ—Ä: ").strip()

        if choice == "1":
            add_node()
        elif choice == "2":
            show_nodes()
        elif choice == "3":
            break
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")

if __name__ == "__main__":
    main()
